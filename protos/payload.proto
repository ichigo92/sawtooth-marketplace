syntax = "proto3";

import "order.proto";
import "agent.proto";
import "asset.proto";
import "role.proto";


message PlasmaSupplyPayload{
    enum PayloadType {
        CREATE_AGENT = 0;
        CREATE_ASSET = 1;
        CREATE_ORDER = 2;
        CREATE_TASK = 3;
        UPDATE_ASSET = 4;
        TRANSFER_ASSET = 5;
        UPDATE_ORDER = 6;
        TRANSFER_ORDER = 7;
        UPDATE_TASK = 8;
        ACCEPT_ORDER = 9;
        FINALIZE_ORDER = 10;
    }

    // Whether the payload contains a create agent, create record,
    // update record, or transfer record action
    PayloadType payload_type = 1;

    // The transaction handler will read from just one of these fields
    // according to the action
    CreateAgent create_agent = 2;
    CreateAsset create_asset = 3;
    CreateOrder create_order = 4;
    CreateTask create_task = 5;
    UpdateAsset update_asset = 6;
    TransferAsset transfer_asset = 7;
    UpdateOrder update_order = 8;
    TransferOrder transfer_order = 9;
    UpdateTask update_task = 10;
    AcceptOrder accept_order = 11;
    FinalizeOrder finalize_order = 12;
    

    // Approximately when transaction was submitted, as a Unix UTC timestamp
    uint64 timestamp = 13;
}


message CreateAgent {
    // A human-readable name identifying the new agent
    string name = 1;
    uint64 description = 2;
    Role role = 3;
    uint64 timestamp = 4;
}

message CreateAsset {
    
    string asset_id = 1;
    string asset_type = 2;
    string name = 3;
    string description = 4;
    Asset.Owner owner = 5;
    Asset.Location location = 6;
    string barcode = 7;
    Asset.PlannedDates planned_dates = 8;
    uint64 timestamp = 9;
    Asset.Manufacturer manufacturer = 10;
    Asset.Orderer orderer = 11;
}


message CreateOrder {
    // The user-defined natural key which identifies the object in the
    // real world (for example a serial number)
    string order_id = 1;

    // Coordinates are expected to be in millionths of a degree
    string order_type = 2;
    bool final = 3;

    sint64 quantity = 4;
    string asset_id = 5;
    string task_id = 6;
    string description = 7;
    string destination = 8;
    sint64 actual_cost = 9;

    Order.OrderDates order_dates = 11;

    string order_status = 12;
    string order_stage = 13;
    bool voided = 14;
    string payment_status = 15;
    Agent order_by = 16;
    Agent order_for = 17;

}

message CreateTask {
    Asset.Owner owner = 1;

    // The user-defined natural key which identifies the object in the
    // real world (for example a serial number)
    string task_id = 2;

    string name = 3;

    string description = 4;

    string location = 5;

    string order_id = 6;

    uint64 timestamp = 7;
}

message UpdateAsset {
    // The id of the record being updated
    string asset_id = 1;

    // Coordinates are expected to be in millionths of a degree
    sint64 latitude = 2;
    sint64 longitude = 3;
}

message TransferAsset {
    // The id of the record for the ownership transfer
    string asset_id = 1;

    // The public key of the agent to which the record will be transferred
    string receiving_agent = 2;
}


message UpdateOrder {
    // The id of the record being updated
    string order_id = 1;

    // Coordinates are expected to be in millionths of a degree
    sint64 latitude = 2;
    sint64 longitude = 3;
    uint64 timestamp = 4;
}


message TransferOrder {
    // The id of the record for the ownership transfer
    string order_id = 1;

    // The public key of the agent to which the record will be transferred
    string receiving_agent = 2;
    uint64 timestamp = 3;
}

message UpdateTask {
    // The id of the record being updated
    string task_id = 1;
}

message AcceptOrder {
    string id = 1;
    string source = 2;
    string target = 3;
    uint64 count = 4;
}

message FinalizeOrder {
  // The natural key of the Record
  string order_id = 1;
}
